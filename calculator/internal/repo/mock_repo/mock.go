// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/contract.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stream "github.com/vandi37/Calculator-Models"
	models "github.com/vandi37/Calculator/internal/models"
	repo "github.com/vandi37/Calculator/internal/repo"
	tree "github.com/vandi37/Calculator/pkg/parsing/tree"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIntoCollection is a mock of IntoCollection interface.
type MockIntoCollection struct {
	ctrl     *gomock.Controller
	recorder *MockIntoCollectionMockRecorder
}

// MockIntoCollectionMockRecorder is the mock recorder for MockIntoCollection.
type MockIntoCollectionMockRecorder struct {
	mock *MockIntoCollection
}

// NewMockIntoCollection creates a new mock instance.
func NewMockIntoCollection(ctrl *gomock.Controller) *MockIntoCollection {
	mock := &MockIntoCollection{ctrl: ctrl}
	mock.recorder = &MockIntoCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntoCollection) EXPECT() *MockIntoCollectionMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockIntoCollection) Collection(name string, opts ...*options.CollectionOptions) *mongo.Collection {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(*mongo.Collection)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockIntoCollectionMockRecorder) Collection(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockIntoCollection)(nil).Collection), varargs...)
}

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// SendError mocks base method.
func (m *MockCallback) SendError(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendError", arg0, arg1)
}

// SendError indicates an expected call of SendError.
func (mr *MockCallbackMockRecorder) SendError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendError", reflect.TypeOf((*MockCallback)(nil).SendError), arg0, arg1)
}

// SendResult mocks base method.
func (m *MockCallback) SendResult(arg0 context.Context, arg1 []stream.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendResult", arg0, arg1)
}

// SendResult indicates an expected call of SendResult.
func (mr *MockCallbackMockRecorder) SendResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResult", reflect.TypeOf((*MockCallback)(nil).SendResult), arg0, arg1)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserRepo) Delete(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepo)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockUserRepo) Get(ctx context.Context, id primitive.ObjectID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepoMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepo)(nil).Get), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockUserRepo) GetByUsername(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserRepoMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetByUsername), ctx, username)
}

// GetCollection mocks base method.
func (m *MockUserRepo) GetCollection() *mongo.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(*mongo.Collection)
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockUserRepoMockRecorder) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockUserRepo)(nil).GetCollection))
}

// Register mocks base method.
func (m *MockUserRepo) Register(ctx context.Context, user models.User) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserRepoMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRepo)(nil).Register), ctx, user)
}

// UpdatePassword mocks base method.
func (m *MockUserRepo) UpdatePassword(ctx context.Context, id primitive.ObjectID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepoMockRecorder) UpdatePassword(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepo)(nil).UpdatePassword), ctx, id, password)
}

// UpdateUsername mocks base method.
func (m *MockUserRepo) UpdateUsername(ctx context.Context, id primitive.ObjectID, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", ctx, id, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockUserRepoMockRecorder) UpdateUsername(ctx, id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockUserRepo)(nil).UpdateUsername), ctx, id, username)
}

// MockExpressionRepo is a mock of ExpressionRepo interface.
type MockExpressionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionRepoMockRecorder
}

// MockExpressionRepoMockRecorder is the mock recorder for MockExpressionRepo.
type MockExpressionRepoMockRecorder struct {
	mock *MockExpressionRepo
}

// NewMockExpressionRepo creates a new mock instance.
func NewMockExpressionRepo(ctrl *gomock.Controller) *MockExpressionRepo {
	mock := &MockExpressionRepo{ctrl: ctrl}
	mock.recorder = &MockExpressionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpressionRepo) EXPECT() *MockExpressionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpressionRepo) Create(ctx context.Context, expression models.Expression, ast tree.Ast) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, expression, ast)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExpressionRepoMockRecorder) Create(ctx, expression, ast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpressionRepo)(nil).Create), ctx, expression, ast)
}

// Delete mocks base method.
func (m *MockExpressionRepo) Delete(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpressionRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressionRepo)(nil).Delete), ctx, id)
}

// DeleteByUser mocks base method.
func (m *MockExpressionRepo) DeleteByUser(ctx context.Context, userID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUser indicates an expected call of DeleteByUser.
func (mr *MockExpressionRepoMockRecorder) DeleteByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUser", reflect.TypeOf((*MockExpressionRepo)(nil).DeleteByUser), ctx, userID)
}

// Get mocks base method.
func (m *MockExpressionRepo) Get(ctx context.Context, id primitive.ObjectID) (*models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExpressionRepoMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressionRepo)(nil).Get), ctx, id)
}

// GetByUser mocks base method.
func (m *MockExpressionRepo) GetByUser(ctx context.Context, userID primitive.ObjectID) ([]models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", ctx, userID)
	ret0, _ := ret[0].([]models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockExpressionRepoMockRecorder) GetByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockExpressionRepo)(nil).GetByUser), ctx, userID)
}

// GetCollection mocks base method.
func (m *MockExpressionRepo) GetCollection() *mongo.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(*mongo.Collection)
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockExpressionRepoMockRecorder) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockExpressionRepo)(nil).GetCollection))
}

// GetFitNodes mocks base method.
func (m *MockExpressionRepo) GetFitNodes(ctx context.Context) ([]stream.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFitNodes", ctx)
	ret0, _ := ret[0].([]stream.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFitNodes indicates an expected call of GetFitNodes.
func (mr *MockExpressionRepoMockRecorder) GetFitNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFitNodes", reflect.TypeOf((*MockExpressionRepo)(nil).GetFitNodes), ctx)
}

// GetNode mocks base method.
func (m *MockExpressionRepo) GetNode(ctx context.Context, id primitive.ObjectID) (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, id)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockExpressionRepoMockRecorder) GetNode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockExpressionRepo)(nil).GetNode), ctx, id)
}

// GetNodeCollection mocks base method.
func (m *MockExpressionRepo) GetNodeCollection() *mongo.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeCollection")
	ret0, _ := ret[0].(*mongo.Collection)
	return ret0
}

// GetNodeCollection indicates an expected call of GetNodeCollection.
func (mr *MockExpressionRepoMockRecorder) GetNodeCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeCollection", reflect.TypeOf((*MockExpressionRepo)(nil).GetNodeCollection))
}

// SetCallback mocks base method.
func (m *MockExpressionRepo) SetCallback(ctx context.Context, callback repo.Callback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCallback", callback)
}

// SetCallback indicates an expected call of SetCallback.
func (mr *MockExpressionRepoMockRecorder) SetCallback(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCallback", reflect.TypeOf((*MockExpressionRepo)(nil).SetCallback), ctx, callback)
}

// SetToError mocks base method.
func (m *MockExpressionRepo) SetToError(ctx context.Context, id primitive.ObjectID, err string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToError", ctx, id, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToError indicates an expected call of SetToError.
func (mr *MockExpressionRepoMockRecorder) SetToError(ctx, id, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToError", reflect.TypeOf((*MockExpressionRepo)(nil).SetToError), ctx, id, err)
}

// SetToNum mocks base method.
func (m *MockExpressionRepo) SetToNum(ctx context.Context, nodeId primitive.ObjectID, result float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToNum", ctx, nodeId, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToNum indicates an expected call of SetToNum.
func (mr *MockExpressionRepoMockRecorder) SetToNum(ctx, nodeId, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToNum", reflect.TypeOf((*MockExpressionRepo)(nil).SetToNum), ctx, nodeId, result)
}
