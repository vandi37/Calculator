// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/contract.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stream "github.com/vandi37/Calculator-Models"
	models "github.com/vandi37/Calculator/internal/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockService) Add(ctx context.Context, expression string, userId primitive.ObjectID) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, expression, userId)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockServiceMockRecorder) Add(ctx, expression, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockService)(nil).Add), ctx, expression, userId)
}

// CheckToken mocks base method.
func (m *MockService) CheckToken(ctx context.Context, token string) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", ctx, token)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockServiceMockRecorder) CheckToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockService)(nil).CheckToken), ctx, token)
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, id)
}

// DoError mocks base method.
func (m *MockService) DoError(ctx context.Context, err *stream.Error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoError", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoError indicates an expected call of DoError.
func (mr *MockServiceMockRecorder) DoError(ctx, error interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoError", reflect.TypeOf((*MockService)(nil).DoError), ctx, error)
}

// DoTask mocks base method.
func (m *MockService) DoTask(ctx context.Context, result *stream.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTask", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoTask indicates an expected call of DoTask.
func (mr *MockServiceMockRecorder) DoTask(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTask", reflect.TypeOf((*MockService)(nil).DoTask), ctx, result)
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, id primitive.ObjectID) (*models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, id)
}

// GetByUSer mocks base method.
func (m *MockService) GetByUSer(ctx context.Context, userId primitive.ObjectID) ([]models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUSer", ctx, userId)
	ret0, _ := ret[0].([]models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUSer indicates an expected call of GetByUSer.
func (mr *MockServiceMockRecorder) GetByUSer(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUSer", reflect.TypeOf((*MockService)(nil).GetByUSer), ctx, userId)
}

// Init mocks base method.
func (m *MockService) Init(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", ctx)
}

// Init indicates an expected call of Init.
func (mr *MockServiceMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockService)(nil).Init), ctx)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, username, password)
}

// Register mocks base method.
func (m *MockService) Register(ctx context.Context, username, password string) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, username, password)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockServiceMockRecorder) Register(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), ctx, username, password)
}

// Tasks mocks base method.
func (m *MockService) Tasks() <-chan *stream.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tasks")
	ret0, _ := ret[0].(<-chan *stream.Task)
	return ret0
}

// Tasks indicates an expected call of Tasks.
func (mr *MockServiceMockRecorder) Tasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tasks", reflect.TypeOf((*MockService)(nil).Tasks))
}

// UpdatePassword mocks base method.
func (m *MockService) UpdatePassword(ctx context.Context, id primitive.ObjectID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockServiceMockRecorder) UpdatePassword(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockService)(nil).UpdatePassword), ctx, id, password)
}

// UpdateUsername mocks base method.
func (m *MockService) UpdateUsername(ctx context.Context, id primitive.ObjectID, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", ctx, id, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockServiceMockRecorder) UpdateUsername(ctx, id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockService)(nil).UpdateUsername), ctx, id, username)
}
